nohup: 忽略输入
ckpt/source/pda/office-home/C
Namespace(batch_size=64, bottleneck=256, class_num=50, classifier='bn', cls_par=0.6, da='pda', distance='cosine', dset='office-home', ent=True, ent_par=1.0, epsilon=1e-05, extra_class=1, gent=True, gpu_id='1', interval=10, issave=False, layer='wn', lr=0.01, lr_decay1=0.1, lr_decay2=1.0, max_epoch=10, name='office-home', name1='CR', name2='CP', name3='CA', net='resnet50', out_file=<_io.TextIOWrapper name='ckpt/target/pda/office-home-addfc+gent/log_par_0.6_thr0.txt' mode='w' encoding='UTF-8'>, output='ckpt/target', output_dir='ckpt/target/pda/office-home-addfc+gent', output_dir_src='ckpt/source/pda/office-home/C', output_src='ckpt/source', s=0, s_dset_path='./data/office-home/Clipart.txt', savename='par_0.6_thr0', seed=2020, src_classes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], t=1, t_dset_path='./data/office-home/Real_World.txt', t_dset_path1='./data/office-home/Product.txt', t_dset_path2='./data/office-home/Art.txt', tar_classes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], tar_classes1=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], tar_classes2=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], test_dset_path='./data/office-home/Real_World.txt', test_dset_path1='./data/office-home/Product.txt', test_dset_path2='./data/office-home/Art.txt', threshold=0, worker=4)
/homes/jh015/.conda/envs/hj_trans/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.
  f"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, "
/homes/jh015/.conda/envs/hj_trans/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
ent tensor(0.2790) tensor(0.3468) tensor(16.6062, dtype=torch.float64) tensor(12.7492, dtype=torch.float64)
all_output1 tensor([0.0100, 0.0137, 0.0193, 0.0133, 0.0161, 0.0117, 0.0146, 0.0097, 0.0084,
        0.0155, 0.0109, 0.0114, 0.0194, 0.0082, 0.0113, 0.0123, 0.0120, 0.0049,
        0.0109, 0.0287, 0.0060, 0.0161, 0.0065, 0.0074, 0.0204, 0.0135, 0.0130,
        0.0149, 0.0132, 0.0048, 0.0216, 0.0083, 0.0136, 0.0172, 0.0042, 0.0060,
        0.0072, 0.0151, 0.0127, 0.0107, 0.0052, 0.0105, 0.0097, 0.0090, 0.0067,
        0.0026, 0.0080, 0.0229, 0.0200, 0.0134, 0.3972])
cls_count [2.600e+01 5.000e+01 6.600e+01 4.400e+01 4.400e+01 3.200e+01 3.300e+01
 2.400e+01 1.900e+01 5.200e+01 3.200e+01 2.700e+01 5.900e+01 1.800e+01
 2.600e+01 2.700e+01 3.600e+01 8.000e+00 3.100e+01 9.700e+01 1.200e+01
 5.100e+01 1.400e+01 1.500e+01 6.400e+01 3.900e+01 3.700e+01 4.800e+01
 3.700e+01 7.000e+00 7.300e+01 1.500e+01 4.500e+01 6.300e+01 3.000e+00
 1.600e+01 1.200e+01 4.400e+01 3.400e+01 3.200e+01 1.100e+01 3.000e+01
 2.100e+01 2.700e+01 1.200e+01 1.000e+00 1.700e+01 7.700e+01 6.100e+01
 4.600e+01 1.665e+03] 0.0006006006006006006 3380.0 0.020600600600600597 0.492603550295858
Accuracy = 69.17% -> 74.88%

50
ent tensor(0.2809) tensor(0.3771) tensor(17.7226, dtype=torch.float64) tensor(12.0636, dtype=torch.float64)
all_output1 tensor([0.0371, 0.0179, 0.0148, 0.0329, 0.0175, 0.0320, 0.0141, 0.0064, 0.0122,
        0.0322, 0.0148, 0.0138, 0.0453, 0.0044, 0.0080, 0.0120, 0.0210, 0.0026,
        0.0323, 0.0255, 0.0081, 0.0169, 0.0207, 0.0089, 0.0196, 0.0050, 0.0062,
        0.0048, 0.0083, 0.0025, 0.0051, 0.0050, 0.0032, 0.0023, 0.0020, 0.0016,
        0.0042, 0.0057, 0.0025, 0.0020, 0.0029, 0.0030, 0.0027, 0.0022, 0.0043,
        0.0016, 0.0020, 0.0054, 0.0067, 0.0042, 0.4339])
cls_count [ 60.  28.  18.  52.  16.  55.  20.   3.  18.  61.  18.  15.  85.   4.
   8.  10.  35.   0.  59.  43.   7.  29.  30.   8.  30.   4.   3.   2.
   9.   0.   5.   2.   0.   2.   0.   0.   1.   6.   0.   0.   1.   2.
   0.   0.   0.   0.   0.   1.   5.   1. 905.] 0.0 1661.0 0.016707182320441986 0.5448524984948826
Accuracy = 65.32% -> 72.85%

20
ent tensor(0.3316) tensor(0.4742) tensor(17.2063, dtype=torch.float64) tensor(17.2063, dtype=torch.float64)
cls_count [0.000e+00 5.000e+00 4.100e+01 1.700e+01 2.600e+01 1.400e+01 3.100e+01
 3.600e+01 8.000e+00 1.800e+01 1.800e+01 1.000e+00 1.000e+01 1.200e+01
 6.000e+00 1.500e+01 7.000e+00 5.000e+00 7.000e+00 5.200e+01 2.000e+00
 3.000e+01 6.000e+00 4.000e+01 1.100e+01 1.000e+01 7.000e+00 1.700e+01
 1.200e+01 8.000e+00 1.800e+01 3.000e+00 7.000e+00 5.600e+01 3.000e+00
 1.000e+00 7.000e+00 2.000e+01 1.700e+01 1.000e+01 9.000e+00 1.500e+01
 2.000e+00 3.000e+00 1.400e+01 0.000e+00 5.000e+00 2.200e+01 1.700e+01
 1.300e+01 1.713e+03] 0.0 2427.0 0.008336252189141856 0.7058096415327565
cls_count [ 0.  5. 41. 17. 26. 14. 31. 36.  8. 18. 18.  1. 10. 12.  6. 15.  7.  5.
  7. 52.  2. 30.  6. 40. 11. 10.  7. 17. 12.  8. 18.  3.  7. 56.  3.  1.
  7. 20. 17. 10.  9. 15.  2.  3. 14.  0.  5. 22. 17. 13.] 0.0 0.0 56.0 0.0
51
acc [ 0.         23.80952381 33.33333333 40.         11.36363636 50.
 47.61904762 30.         17.07317073 35.29411765 39.13043478  5.
 44.44444444 23.91304348  7.69230769 22.5         7.5         9.30232558
 15.         68.          5.26315789 57.14285714 31.25       39.13043478
 18.18181818 12.65822785 38.88888889 20.         11.9047619   6.25
 36.95652174  9.52380952 14.63414634 72.97297297  8.33333333  5.26315789
 22.22222222 34.04255319 26.66666667 53.33333333 26.31578947 40.
  4.76190476 16.66666667 55.          0.         10.         23.1884058
 60.         30.3030303  82.74268105] 51 H_score 40.07051885528432
Task: office-home, Iter:0/530; Accuracy = 27.54% / 26.44% / 82.74%
ent tensor(0.1389) tensor(0.1323) tensor(5.1161, dtype=torch.float64) tensor(5.1806, dtype=torch.float64)
all_output1 tensor([0.0121, 0.0229, 0.0256, 0.0166, 0.0208, 0.0199, 0.0207, 0.0227, 0.0211,
        0.0249, 0.0157, 0.0185, 0.0265, 0.0173, 0.0228, 0.0246, 0.0164, 0.0102,
        0.0187, 0.0300, 0.0071, 0.0226, 0.0125, 0.0170, 0.0218, 0.0147, 0.0176,
        0.0227, 0.0140, 0.0108, 0.0269, 0.0168, 0.0257, 0.0226, 0.0075, 0.0113,
        0.0163, 0.0220, 0.0155, 0.0145, 0.0071, 0.0160, 0.0141, 0.0145, 0.0133,
        0.0112, 0.0261, 0.0293, 0.0249, 0.0192, 0.0764])
cls_count [ 39.  79.  88.  56.  75.  70.  70.  72.  72.  81.  52.  68.  88.  58.
  80.  90.  59.  35.  62.  99.  21.  76.  48.  58.  76.  51.  61.  79.
  49.  33.  91.  60.  89.  75.  26.  38.  62.  79.  50.  50.  23.  51.
  49.  48.  42.  39.  92. 100.  82.  64. 225.] 0.09333333333333334 3380.0 0.28044444444444444 0.06656804733727806
Accuracy = 76.60% -> 78.08%

50
ent tensor(0.1134) tensor(0.1042) tensor(3.2609, dtype=torch.float64) tensor(3.3008, dtype=torch.float64)
all_output1 tensor([0.0444, 0.0389, 0.0485, 0.0417, 0.0491, 0.0407, 0.0283, 0.0132, 0.0366,
        0.0551, 0.0424, 0.0531, 0.0634, 0.0077, 0.0101, 0.0336, 0.0361, 0.0035,
        0.0573, 0.0274, 0.0052, 0.0284, 0.0476, 0.0468, 0.0369, 0.0031, 0.0016,
        0.0025, 0.0051, 0.0023, 0.0047, 0.0037, 0.0030, 0.0010, 0.0014, 0.0007,
        0.0034, 0.0044, 0.0011, 0.0010, 0.0010, 0.0022, 0.0017, 0.0015, 0.0027,
        0.0010, 0.0014, 0.0031, 0.0023, 0.0022, 0.0457])
cls_count [ 75.  69.  86.  71.  86.  69.  50.  20.  62.  95.  76.  99. 107.   9.
  17.  60.  62.   4.  96.  47.   7.  47.  84.  83.  65.   4.   1.   4.
   8.   3.   6.   3.   2.   0.   1.   0.   4.   4.   0.   0.   1.   2.
   0.   1.   2.   0.   1.   2.   1.   2.  63.] 0.0 1661.0 0.5073015873015874 0.037928958458759765
Accuracy = 75.68% -> 76.34%

21
ent tensor(0.2609) tensor(0.4618) tensor(17.8492, dtype=torch.float64) tensor(17.8492, dtype=torch.float64)
cls_count [   9.   12.   58.   28.   37.   27.   47.   56.   14.   40.   23.   17.
   19.   22.   21.   41.   16.   24.   19.   63.    9.   46.   10.   47.
   21.    5.   12.   31.   13.   12.   33.    8.   10.   66.   12.   11.
   19.   20.   23.   17.   13.   38.   10.    8.   27.    6.   22.   37.
   29.   21. 1198.] 0.004173622704507512 2427.0 0.02051752921535893 0.49361351462711167
cls_count [ 9. 12. 58. 28. 37. 27. 47. 56. 14. 40. 23. 17. 19. 22. 21. 41. 16. 24.
 19. 63.  9. 46. 10. 47. 21.  5. 12. 31. 13. 12. 33.  8. 10. 66. 12. 11.
 19. 20. 23. 17. 13. 38. 10.  8. 27.  6. 22. 37. 29. 21.] 0.0 5.0 66.0 0.07575757575757576
51
acc [26.66666667 47.61904762 44.44444444 65.         20.45454545 68.18181818
 59.52380952 40.         24.3902439  64.70588235 47.82608696 25.
 66.66666667 43.47826087 38.46153846 60.         20.         39.53488372
 37.5        81.33333333 15.78947368 75.51020408 43.75       52.17391304
 34.09090909  6.32911392 66.66666667 40.         11.9047619   6.25
 65.2173913  14.28571429 19.51219512 86.48648649 29.16666667 57.89473684
 62.96296296 34.04255319 44.44444444 86.66666667 31.57894737 76.66666667
 23.80952381 44.44444444 70.         22.22222222 40.         40.57971014
 80.         48.48484848 69.79969183] 51 H_score 54.74656311400861
Task: office-home, Iter:53/530; Accuracy = 45.52% / 45.03% / 69.80%
ent tensor(0.1004) tensor(0.0846) tensor(8.5257, dtype=torch.float64) tensor(8.8520, dtype=torch.float64)
all_output1 tensor([0.0108, 0.0225, 0.0241, 0.0166, 0.0190, 0.0186, 0.0162, 0.0193, 0.0194,
        0.0232, 0.0162, 0.0198, 0.0247, 0.0175, 0.0193, 0.0244, 0.0155, 0.0106,
        0.0182, 0.0289, 0.0057, 0.0212, 0.0120, 0.0168, 0.0209, 0.0163, 0.0163,
        0.0198, 0.0136, 0.0089, 0.0253, 0.0160, 0.0241, 0.0218, 0.0068, 0.0121,
        0.0155, 0.0239, 0.0139, 0.0133, 0.0065, 0.0155, 0.0143, 0.0136, 0.0112,
        0.0116, 0.0246, 0.0276, 0.0232, 0.0181, 0.1252])
cls_count [ 37.  78.  81.  56.  64.  68.  55.  66.  62.  82.  55.  69.  87.  58.
  69.  88.  53.  37.  60.  98.  20.  72.  42.  57.  72.  57.  56.  68.
  48.  28.  86.  58.  86.  74.  25.  41.  54.  80.  47.  45.  21.  51.
  51.  47.  39.  39.  86.  99.  79.  63. 366.] 0.0546448087431694 3380.0 0.16469945355191257 0.1082840236686391
Accuracy = 78.14% -> 78.70%

50
ent tensor(0.0865) tensor(0.0651) tensor(5.1545, dtype=torch.float64) tensor(5.3569, dtype=torch.float64)
all_output1 tensor([0.0430, 0.0391, 0.0478, 0.0419, 0.0471, 0.0387, 0.0262, 0.0165, 0.0340,
        0.0546, 0.0464, 0.0593, 0.0606, 0.0044, 0.0080, 0.0351, 0.0351, 0.0026,
        0.0546, 0.0268, 0.0035, 0.0271, 0.0473, 0.0516, 0.0333, 0.0024, 0.0007,
        0.0008, 0.0037, 0.0010, 0.0021, 0.0016, 0.0012, 0.0005, 0.0009, 0.0003,
        0.0021, 0.0043, 0.0004, 0.0004, 0.0004, 0.0016, 0.0016, 0.0008, 0.0010,
        0.0005, 0.0008, 0.0018, 0.0016, 0.0017, 0.0815])
cls_count [ 73.  69.  84.  72.  81.  66.  48.  26.  58.  96.  82. 103. 103.   6.
  14.  61.  60.   3.  92.  46.   4.  45.  86.  90.  59.   4.   0.   1.
   5.   1.   3.   2.   0.   0.   1.   0.   2.   7.   0.   0.   0.   2.
   0.   0.   1.   0.   1.   1.   2.   1. 100.] 0.0 1661.0 0.3122 0.060204695966285415
Accuracy = 76.34% -> 76.52%

21
ent tensor(0.1157) tensor(0.4006) tensor(33.0615, dtype=torch.float64) tensor(33.0615, dtype=torch.float64)
cls_count [   4.   14.   55.   28.   31.   27.   42.   42.   13.   37.   23.   15.
   20.   21.   15.   39.   13.   21.   17.   63.    6.   45.    9.   48.
   20.    6.   12.   29.   13.   10.   33.    8.    9.   66.   12.   13.
   20.   20.   20.   16.   13.   39.    8.    8.   26.    5.   22.   37.
   27.   19. 1268.] 0.0031545741324921135 2427.0 0.018280757097791797 0.5224557066337041
cls_count [ 4. 14. 55. 28. 31. 27. 42. 42. 13. 37. 23. 15. 20. 21. 15. 39. 13. 21.
 17. 63.  6. 45.  9. 48. 20.  6. 12. 29. 13. 10. 33.  8.  9. 66. 12. 13.
 20. 20. 20. 16. 13. 39.  8.  8. 26.  5. 22. 37. 27. 19.] 0.0 4.0 66.0 0.06060606060606061
51
acc [26.66666667 57.14285714 43.43434343 65.         15.90909091 68.18181818
 59.52380952 40.         24.3902439  58.82352941 47.82608696 25.
 66.66666667 41.30434783 34.61538462 62.5        17.5        37.20930233
 32.5        81.33333333 15.78947368 75.51020408 43.75       52.17391304
 34.09090909  7.59493671 61.11111111 40.         11.9047619   6.25
 67.39130435 14.28571429 17.07317073 86.48648649 29.16666667 68.42105263
 66.66666667 34.04255319 44.44444444 86.66666667 31.57894737 76.66666667
 19.04761905 44.44444444 70.         22.22222222 42.5        42.02898551
 80.         45.45454545 73.34360555] 51 H_score 55.6590248131622
Task: office-home, Iter:106/530; Accuracy = 45.40% / 44.85% / 73.34%
