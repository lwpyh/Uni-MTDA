nohup: 忽略输入
ckpt/source/pda/office-home/A
Namespace(batch_size=64, bottleneck=256, class_num=50, classifier='bn', cls_par=0.3, da='pda', distance='cosine', dset='office-home', ent=True, ent_par=1.0, epsilon=1e-05, gent=True, gpu_id='1', interval=15, issave=False, layer='wn', lr=0.01, lr_decay1=0.1, lr_decay2=1.0, max_epoch=15, name='office-home', name1='AP', name2='AC', net='resnet50', out_file=<_io.TextIOWrapper name='ckpt/target/pda/office-home-addfc+gent/log_par_0.3_thr10.txt' mode='w' encoding='UTF-8'>, output='ckpt/target', output_dir='ckpt/target/pda/office-home-addfc+gent', output_dir_src='ckpt/source/pda/office-home/A', output_src='ckpt/source', s=0, s_dset_path='./data/office-home/Art.txt', savename='par_0.3_thr10', seed=2020, src_classes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], t=1, t_dset_path='./data/office-home/Product.txt', t_dset_path1='./data/office-home/Clipart.txt', t_dset_path2='./data/office-home/Real_World.txt', tar_classes=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], tar_classes1=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], test_dset_path='./data/office-home/Product.txt', test_dset_path1='./data/office-home/Clipart.txt', test_dset_path2='./data/office-home/Real_World.txt', threshold=10, worker=4)
/homes/jh015/.conda/envs/hj_trans/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.
  f"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, "
/homes/jh015/.conda/envs/hj_trans/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
cls_count [ 98.  74.  95.  77.  74. 120.  67.  12.  49. 160.  57. 124.  85.  87.
  67.  66. 123. 231.  99.  48.  54.  55.  85.  81.  13. 101. 131.  63.
 125.  57.  90. 102. 128.  70.  27.  62. 167. 114.  63.  59.  88.  53.
 134. 114.  44.  19.  93. 153. 105. 176.]
Accuracy = 54.34% -> 61.07%

50
cls_count [ 23. 150.  50.  62.  68.  51.  15.  15.   7. 144.  36. 126.  62.  16.
  39.  14.  87.  72.  56.  83.  46.  69.  11.  50.  30.   9.   8.   2.
  26.  16.   6.  36.   3.   3.   6.  27.   9.   5.   6.   0.  36.  13.
  23.  24.  22.  18.  14.  12.   6.  45.]
Accuracy = 47.35% -> 52.48%

37
cls_count [ 76.  69. 152.  74.  25. 100. 100.  32.  53.  98.  61.  51. 100.  94.
  81. 107.  77. 197. 113.  46.  95.  64.  93.  83.  18.  96.  94.  75.
 167.  89.  89. 149. 105.  77.  27.  57. 151. 143.  88.  55.  69.  50.
 110. 118.  70.   9.  76. 147. 112. 157.]
Accuracy = 60.28% -> 60.85%

49
cls_count [ 33. 112.  72.  65.  47.  54.  41.  35.   3. 102.  40.  57.  71.  54.
  57.  30.  77.  43.  55.  83.  68.  67.  14.  56.  34.   2.   0.   2.
  42.  15.   0.  57.   0.   2.   1.  21.   2.   1.   1.   1.  30.  27.
  11.  23.  37.   3.  22.  46.   0.  41.]
Accuracy = 55.49% -> 55.21%

36
cls_count [ 78.  69. 122.  65.  26. 106.  99.  35.  49.  96.  76.  59. 102. 101.
  76.  98.  69. 186. 118.  46. 100.  60.  94.  96.  19.  85.  97.  84.
 168.  90.  89. 135. 103.  76.  43.  53. 148. 127. 107.  57.  73.  51.
 104. 120.  84.   7.  77. 147. 120. 149.]
Accuracy = 60.80% -> 60.87%

49
cls_count [ 33. 108.  74.  59.  55.  54.  41.  36.   0. 100.  39.  47.  72.  55.
  55.  31.  71.  40.  55.  82.  73.  65.  17.  54.  31.   0.   0.   1.
  35.  12.   0.  61.   0.   1.   1.  32.   0.   1.   0.   0.  40.  34.
  12.  29.  37.   0.  21.  51.   0.  42.]
Accuracy = 55.26% -> 55.32%

36
cls_count [ 74.  68. 108.  68.  29. 104.  98.  49.  49.  95.  78.  63. 104.  99.
  85.  96.  65. 182. 120.  46. 101.  59.  99.  94.  20.  86.  96.  85.
 167.  89.  91. 127. 100.  77.  47.  55. 139. 127. 105.  57.  71.  54.
  97. 120.  91.   7.  84. 145. 120. 149.]
Accuracy = 61.12% -> 60.94%

49
cls_count [ 34. 106.  73.  58.  55.  55.  41.  38.   0. 100.  40.  44.  72.  55.
  56.  33.  71.  38.  55.  82.  76.  66.  17.  54.  32.   0.   0.   2.
  36.  13.   0.  58.   0.   0.   0.  33.   0.   0.   0.   0.  38.  33.
  12.  33.  37.   0.  21.  48.   0.  42.]
Accuracy = 55.32% -> 55.49%

36
cls_count [ 75.  69. 105.  68.  29. 104.  96.  53.  48.  94.  82.  63. 104. 101.
  84.  96.  68. 181. 119.  46.  99.  56.  99.  96.  22.  86.  97.  90.
 165.  90.  90. 128. 103.  77.  47.  56. 141. 125. 103.  57.  71.  49.
  96. 118.  93.   7.  79. 143. 121. 150.]
Accuracy = 61.21% -> 61.03%

49
cls_count [ 35. 106.  73.  58.  55.  55.  41.  38.   0. 100.  39.  44.  72.  55.
  55.  34.  70.  40.  55.  82.  74.  66.  19.  54.  32.   0.   0.   2.
  34.  13.   0.  59.   0.   0.   0.  33.   0.   0.   0.   0.  39.  34.
  13.  33.  36.   0.  20.  47.   0.  42.]
Accuracy = 55.61% -> 55.49%

36
cls_count [ 74.  68. 106.  67.  29. 103.  98.  55.  48.  93.  77.  67. 105. 100.
  81.  96.  68. 179. 119.  46. 100.  58.  99.  94.  26.  84.  97.  86.
 165.  91.  91. 127. 103.  77.  48.  55. 144. 125. 104.  57.  71.  52.
  98. 116.  95.   5.  80. 142. 121. 149.]
Accuracy = 61.25% -> 61.12%

49
cls_count [ 35. 106.  73.  58.  55.  55.  41.  38.   0. 100.  39.  44.  72.  55.
  55.  34.  70.  38.  55.  82.  74.  66.  19.  54.  32.   0.   0.   1.
  34.  13.   0.  59.   0.   0.   0.  34.   0.   0.   0.   0.  39.  36.
  13.  33.  36.   0.  20.  47.   0.  42.]
Accuracy = 55.55% -> 55.44%

36
